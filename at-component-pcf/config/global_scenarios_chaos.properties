######################### Chaos Testing ###############

global.scenario.chaos.lib-dir={ref:global.workspace.library.location-features}sc-chaos/
global.scenario.chaos.utilities-dir={ref:global.workspace.library.location-scripts}sc-chaos/


global.scenario.chaos.pod-wait=100


global.scenario.chaos.command-start-chaosagent-applevel-param=[release={ref:sut.k8s.namespace.pcf}-ngn-datastore,release={ref:sut.k8s.namespace.pcf}-pcf-engine-app-{ref:Engine.Group}]
global.scenario.chaos.command-start-chaosagent-applevel=chaos-test start target pod filter { labels {ref:global.scenario.chaos.command-start-chaosagent-applevel-param} namespaces {ref:sut.k8s.namespace.pcf} random true sample 1 wait {ref:global.scenario.chaos.pod-wait} }


global.scenario.chaos.command-start-chaosagent-dynamiclevel-param={ref:sut.k8s.namespace.pcf},{ref:sut.k8s.namespace.cee}
global.scenario.chaos.command-start-chaosagent-dynamic-level=chaos-test start target pod filter { namespaces {ref:global.scenario.chaos.command-start-chaosagent-dynamiclevel-param} random true sample 1 wait {ref:global.scenario.chaos.pod-wait} }

global.scenario.chaos.label-high-priority=priority=high
global.scenario.chaos.command-start-high-priority=chaos-test start target pod filter { labels {ref:global.scenario.chaos.label-high-priority} namespaces {ref:global.scenario.chaos.command-start-chaosagent-dynamiclevel-param} random true sample 1 wait {ref:global.scenario.chaos.pod-wait} }

global.scenario.chaos.label-low-priority=priority=low
global.scenario.chaos.command-start-low-priority=chaos-test start target pod filter { labels {ref:global.scenario.chaos.label-low-priority} namespaces {ref:global.scenario.chaos.command-start-chaosagent-dynamiclevel-param} random true sample 1 wait {ref:global.scenario.chaos.pod-wait} }


global.scenario.chaos.label-med-priority=priority=med
global.scenario.chaos.command-start-med-priority=chaos-test start target pod filter { labels {ref:global.scenario.chaos.label-med-priority} namespaces {ref:global.scenario.chaos.command-start-chaosagent-dynamiclevel-param} random true sample 1 wait {ref:global.scenario.chaos.pod-wait} }


